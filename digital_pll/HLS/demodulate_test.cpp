#include "demodulate.hpp"
#include <stdlib.h>
#include <math.h>
#include <tuple>
#include <iostream>

const int16_t audio_data[] = {
   719,   748,   468,   487,   533,   880,  1187,  1717,  2124,  2262,  2417,  2371,
  2106,  1794,  1275,   690,     3,  -721, -1382, -1855, -2227, -2378, -2383, -2243,
 -1953, -1510,  -958,  -291,   214,   497,   833,   909,   818,   620,   290,  -207,
  -787, -1396, -2019, -2434, -2756, -2914, -2901, -2762, -2424, -1954, -1371,  -667,
   -66,   270,   638,   762,   762,   682,   490,   235,   100,   161,   280,   583,
   913,  1391,  1576,  1634,  1685,  1398,  1093,   658,   255,    94,     2,   105,
   349,   761,  1288,  1898,  2303,  2564,  2793,  2744,  2612,  2264,  1851,  1280,
   586,  -143,  -830, -1336, -1795, -1993, -2038, -1917, -1622, -1209,  -646,    28,
   598,   929,  1265,  1382,  1330,  1190,   843,   387,  -157,  -776, -1420, -1866,
 -2227, -2379, -2346, -2193, -1868, -1409,  -796,  -111,   557,   949,  1380,  1636,
  1604,  1550,  1310,   946,   449,  -113,  -744, -1260, -1629, -1888, -1907, -1800,
 -1579, -1171,  -623,    23,   707,  1176,  1579,  1826,  1836,  1802,  1550,  1144,
   641,    30,  -639, -1236, -1742, -2039, -2141, -2132, -1915, -1584, -1074,  -460,
   237,   790,  1137,  1509,  1588,  1497,  1286,   937,   482,  -126,  -761, -1393,
 -1829, -2200, -2301, -2239, -2124, -1779, -1282,  -659,    76,   742,  1157,  1533,
  1742,  1728,  1602,  1342,  1005,   651,   379,   310,   403,   607,   905,  1316,
  1473,  1527,  1543,  1253,   961,   545,   197,     7,  -138,    -7,   198,   507,
   843,   838,   861,   706,   351,    13,  -459,  -680,  -805,  -858,  -598,  -336,
    89,   318,   303,   381,   110,  -217,  -616, -1027, -1185, -1343, -1253,  -984,
  -677,  -253,  -151,   -65,   -34,  -288,  -560,  -926, -1144, -1209, -1213,  -975,
  -710,  -295,    91,    71,   143,    20,  -291,  -616,  -953, -1086, -1158,  -993,
  -680,  -328,   211,   446,   516,   623,   401,   145,  -200,  -482,  -575,  -601,
};

const std::tuple<bool, bool, bool> pll_data[] = {
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 1, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {0, 0, 1},
	{0, 0, 1}, {0, 0, 1}, {0, 0, 1}, {0, 0, 1},
	{0, 0, 1}, {0, 0, 1}, {0, 0, 1}, {0, 0, 1},
	{0, 0, 1}, {0, 0, 1}, {0, 0, 1}, {0, 0, 1},
	{0, 0, 1}, {0, 1, 1}, {0, 0, 1}, {0, 0, 1},
	{0, 0, 1}, {0, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 1, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 1, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 1, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 1, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 1, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 1, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {0, 0, 1}, {0, 0, 1}, {0, 0, 1},
	{0, 0, 1}, {0, 0, 1}, {0, 0, 1}, {0, 0, 1},
	{0, 0, 1}, {0, 0, 1}, {0, 0, 1}, {0, 0, 1},
	{0, 0, 1}, {0, 0, 1}, {0, 0, 1}, {0, 1, 1},
	{0, 0, 1}, {0, 0, 1}, {0, 0, 1}, {0, 0, 1},
	{0, 0, 1}, {0, 0, 1}, {0, 0, 1}, {0, 0, 1},
	{0, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 1, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 1, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 1, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1},
	{1, 0, 1}, {1, 0, 1}, {1, 0, 1}, {1, 0, 1}
};

// From https://stackoverflow.com/a/17473007
template<typename Type, unsigned N, unsigned Last>
struct tuple_printer {

    static void print(std::ostream& out, const Type& value) {
        out << std::get<N>(value) << ", ";
        tuple_printer<Type, N + 1, Last>::print(out, value);
    }
};

template<typename Type, unsigned N>
struct tuple_printer<Type, N, N> {

    static void print(std::ostream& out, const Type& value) {
        out << std::get<N>(value);
    }

};

template<typename... Types>
std::ostream& operator<<(std::ostream& out, const std::tuple<Types...>& value) {
    out << "(";
    tuple_printer<std::tuple<Types...>, 0, sizeof...(Types) - 1>::print(out, value);
    out << ")";
    return out;
}

int main()
{

    idata_type tmp_in;
	odata_type tmp_out;

    bool failed = false;
    const std::tuple<bool, bool, bool>* p = pll_data;

    const int last = sizeof(audio_data)/2 - 1;
    for (int i = 0; i != sizeof(audio_data)/2; ++i)
    {
    	tmp_in.data = audio_data[i];
    	if (last == i) tmp_in.last = true;
    	demodulate5(tmp_in, tmp_out);
    	ap_int<3> tmp = tmp_out.data;
    	std::tuple<bool,bool,bool> t(tmp & 4, tmp & 2, tmp & 1);
        if (*p != t) {
			std::cout << "got " << t << ", expected " << *p << std::endl;
			failed = true;
        }
        ++p;
    }

    if (!tmp_out.last) {
    	printf("TLAST not set");
    	failed = true;
    }

    return failed;
}
